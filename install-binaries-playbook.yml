- name: Install binaries and setup Debian 12
  hosts: localhost
  vars:
    user_programs: /usr/local/bin
    keyd_git_version: "201a077b2ccb8cd01b77396c1f88e07cbcb11d1e"
  tasks:
    # Maybe included in Debian 13
    - name: Clone keyd from GitHub
      ansible.builtin.git:
        repo: https://github.com/rvaiya/keyd
        dest: "{{ playbook_dir }}/keyd"
        version: "{{ keyd_git_version }}"
        update: false

    - name: Ensure the keyd directory exists
      become: true
      ansible.builtin.file:
        path: /etc/keyd/
        state: directory
        mode: "0755"

    - name: Copy keyd default.conf to /etc/keyd/
      become: true
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/extras/default.conf"
        dest: /etc/keyd/default.conf
        owner: root
        group: root
        mode: "0644"

    - name: Download and install GitHub binaries
      become: true
      block:
        - name: Download and install marksman
          ansible.builtin.get_url:
            url: "https://github.com/artempyanykh/marksman/releases/download/2024-12-18/marksman-linux-x64"
            dest: "{{ user_programs }}/marksman"
            mode: "0755"

        - name: Download and install lazygit
          ansible.builtin.unarchive:
            src: "{{ item.src }}"
            dest: "{{ user_programs }}"
            remote_src: true
            extra_opts: "{{ item.extra_opts | default(omit) }}"
            include: "{{ item.include | default(omit) }}"
          loop:
            - {
                src: "https://github.com/jesseduffield/lazygit/releases/download/v0.45.0/lazygit_0.45.0_Linux_x86_64.tar.gz",
                include: "lazygit",
              }

        - name: Download and install yabridge
          ansible.builtin.unarchive:
            src: https://github.com/robbert-vdh/yabridge/releases/download/5.0.5/yabridge-5.0.5.tar.gz
            dest: "{{ ansible_facts['user_dir'] }}/.local/share"
            remote_src: true

    # A single shell session is required for the installations to ensure the Rust environment
    # variables are correctly sourced and recognized by subsequent installations.
    # The `set -o pipefail` option ensures the task fails if any command in the pipeline fails
    # The use of "/bin/bash" as the executable is specified to guarantee compatibility with `pipefail`.
    # The default shell on some systems (e.g., Debian) is `dash`, which may not support such options.
    # The `.cargo/env` file, created by the Rust installation script, acts as a marker indicating
    # Rust is installed. If this file exists, Ansible skips this task, ensuring idempotency and
    # avoiding unnecessary reinstallation.
    - name: Install the latest stable Rust, Rust-analyzer, AIChat and argc
      ansible.builtin.shell: >
        set -o pipefail &&
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y &&
        . "{{ ansible_facts['user_dir'] }}/.cargo/env" &&
        rustup component add rust-analyzer &&
        cargo install argc &&
        cargo install aichat &&
        cargo install harper-ls
      args:
        creates: "{{ ansible_facts['user_dir'] }}/.cargo/env"
        executable: /bin/bash

    # Blender will be coming to Trixie, not here in Dec 24
