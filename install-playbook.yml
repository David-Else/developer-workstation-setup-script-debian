- name: Setup Debian 12
  hosts: localhost
  vars:
    user_programs: /usr/local/bin
    packages_to_remove:
      - gnome-games
      - gnome-music
      - gnome-sound-recorder
      - cheese
      - evolution
      - rhythmbox
      - totem
    packages_to_install:
      - adb
      - android-sdk-platform-tools-common
      - bat
      - black
      - blender
      - borgbackup
      - build-essential
      - curl
      - default-jdk-headless
      - entr
      - ffmpeg
      - fzf
      - gh
      - gnome-boxes
      - gnome-shell-extension-autohidetopbar
      - gnome-shell-extension-caffeine
      - gnome-shell-pomodoro
      - gnome-software-plugin-flatpak
      - gnome-tweaks
      - handbrake
      - heif-gdk-pixbuf
      - heif-thumbnailer
      - imagemagick
      - keepassxc
      - kitty
      - krita
      - libvirt-daemon-system # needed for gnome-boxes
      - lshw
      - mediainfo
      - mkvtoolnix-gui
      - mpv
      - mpv-mpris
      - nodejs
      - npm
      - pandoc
      - pipewire-jack
      - pipx
      - rclone
      - ripgrep
      - screenkey
      - shellcheck
      - shfmt
      - stow
      - tesseract-ocr
      - tldr
      - trash-cli
      - xclip
      - xdg-desktop-portal-gnome
      - ytfzf
      - zathura
      - zoxide
    flatpak_packages:
      - com.obsproject.Studio
      - com.obsproject.Studio.Plugin.DroidCam
      - com.obsproject.Studio.Plugin.MoveTransition
      - org.mozilla.Thunderbird
      - org.signal.Signal
      - com.github.tchx84.Flatseal
    npm_packages:
      - bash-language-server@5.0.0
      - prettier@3.0.3
      - pyright@1.1.333
      - "@tailwindcss/language-server@0.0.14"
      - typescript-language-server@4.0.0
      - typescript@5.2.2
      - vscode-langservers-extracted@4.8.0
      - yaml-language-server@1.14.0
    python_packages:
      - shell-gpt
      - yt-dlp

  tasks:
    - name: Check if OS is Debian and version is 12
      fail:
        msg: "This playbook can only be run on Debian 12"
      when: ansible_os_family != 'Debian' or ansible_distribution_version != '12'

    - name: Add user to the pipewire group
      become: true
      block:
        - name: Create pipewire group
          ansible.builtin.group:
            name: pipewire

        - name: Add user to the pipewire group
          ansible.builtin.user:
            name: "{{ lookup('env', 'USER') }}"
            groups: pipewire
            append: true

    - name: Add the Flathub repository
      community.general.flatpak_remote:
        name: flathub
        flatpakrepo_url: https://flathub.org/repo/flathub.flatpakrepo

    - name: Remove unwanted desktop apps
      become: true
      ansible.builtin.apt:
        name: "{{ packages_to_remove }}"
        state: absent
        autoremove: true
        purge: true

    - name: Install Packages
      become: true
      block:
        - name: Update and upgrade all Debian packages
          ansible.builtin.apt:
            upgrade: dist
            update_cache: true

        - name: Install Debian packages
          ansible.builtin.apt:
            name: "{{ packages_to_install }}"

        - name: Install Flatpak packages
          community.general.flatpak:
            name: "{{ flatpak_packages }}"

        - name: Install NPM global packages
          loop: "{{ npm_packages }}"
          community.general.npm:
            name: "{{ item }}"
            global: true

    - name: Install Python packages
      ansible.builtin.command: pipx install {{ item }}
      loop: "{{ python_packages }}"
      args:
        creates: "{{ ansible_env.HOME }}/.local/pipx/venvs/{{ item }}"

    - name: Run pipx ensurepath
      ansible.builtin.command: pipx ensurepath
      changed_when: false

    # =========================================================================
    # Install binaries
    # =========================================================================
    - name: Install keyd from source
      become: true
      block:
        - name: Download the keyd tar.gz file from GitHub
          ansible.builtin.get_url:
            url: https://github.com/rvaiya/keyd/archive/refs/tags/v2.4.3.tar.gz
            dest: /tmp/v2.4.3.tar.gz

        - name: Unarchive the tar.gz file
          ansible.builtin.unarchive:
            src: /tmp/v2.4.3.tar.gz
            dest: /tmp
            remote_src: true

        - name: Compile and install the software
          community.general.make:
            chdir: /tmp/keyd-2.4.3
            target: install
          ignore_errors: true

        - name: Copy default.conf to /etc/keyd/
          ansible.builtin.copy:
            src: "{{ playbook_dir }}/extras/default.conf"
            dest: /etc/keyd/default.conf
            owner: root
            group: root
            mode: "0644"

        - name: Enable and start the keyd service
          ansible.builtin.systemd:
            name: keyd
            enabled: true
            state: started

    - name: Install nnn
      block:
        - name: Install nnn with nerd font 3 support
          ansible.builtin.apt:
            deb: "{{ playbook_dir }}/extras/nnn_4.9-1_amd64.deb"

        - name: Download the latest nnn plugins
          ansible.builtin.get_url:
            url: https://raw.githubusercontent.com/jarun/nnn/master/plugins/getplugs
            dest: /tmp/getplugs
            mode: "0755"

        - name: Install nnn plugins
          ansible.builtin.command: /tmp/getplugs
          args:
            creates: "{{ lookup('env', 'HOME') }}/.config/nnn/plugins"

    - name: Install nerd fonts
      block:
        - name: Create ~/.local/share/fonts directory
          ansible.builtin.file:
            path: "{{ lookup('ansible.builtin.env', 'HOME') }}/.local/share/fonts"
            state: directory

        - name: Copy nerd fonts symbols only
          ansible.builtin.copy:
            src: "{{ playbook_dir }}/extras/SymbolsNerdFontMono-Regular.ttf"
            dest: "{{ lookup('ansible.builtin.env', 'HOME') }}/.local/share/fonts/SymbolsNerdFontMono-Regular.ttf"

        - name: Refresh font cache
          ansible.builtin.command: fc-cache -vf
          changed_when: false

    - name: Download and install GitHub binaries
      become: true
      block:
        - name: Download and install Marksman language server
          ansible.builtin.get_url:
            url: https://github.com/artempyanykh/marksman/releases/download/2023-07-01/marksman-linux-x64
            dest: "{{ user_programs }}/marksman"
            mode: "0755"

        - name: Download and install tt
          ansible.builtin.get_url:
            url: https://github.com/lemnos/tt/releases/download/v0.4.2/tt-linux
            dest: "{{ user_programs }}/tt"
            mode: "0755"

        - name: Download and install tt man page
          ansible.builtin.get_url:
            url: https://github.com/lemnos/tt/releases/download/v0.4.2/tt.1.gz
            dest: /usr/share/man/man1/tt.1.gz

        - name: Download and install delta
          ansible.builtin.apt:
            deb: https://github.com/dandavison/delta/releases/download/0.16.5/git-delta_0.16.5_amd64.deb

        - name: Download and install ltex-ls
          ansible.builtin.unarchive:
            src: https://github.com/valentjn/ltex-ls/releases/download/16.0.0/ltex-ls-16.0.0.tar.gz
            dest: "{{ user_programs }}"
            remote_src: true
            extra_opts:
              - "--strip-components=1"
              - "ltex-ls-16.0.0/bin"
              - "ltex-ls-16.0.0/lib"

        - name: Create symlink to ltex-ls binary
          ansible.builtin.file:
            src: "{{ user_programs }}/bin/ltex-ls"
            dest: "{{ user_programs }}/ltex-ls"
            state: link

        - name: Download and install vale
          ansible.builtin.unarchive:
            src: https://github.com/errata-ai/vale/releases/download/v2.27.0/vale_2.27.0_Linux_64-bit.tar.gz
            dest: "{{ user_programs }}"
            remote_src: true
            include: vale

    - name: Install the latest stable rust and rust-analyzer
      ansible.builtin.shell: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && . "{{ ansible_env.HOME }}/.cargo/env" && rustup component add rust-analyzer
      args:
        creates: "{{ ansible_env.HOME }}/.cargo/env"

    # Stow * Stow will fail if you have run kitty or lazygit in advance as they both create non link config files on first run
    - name: Stow dotfiles
      block:
        - name: Create ~/.dotfile directory
          ansible.builtin.file:
            path: "{{ lookup('ansible.builtin.env', 'HOME') }}/.dotfiles"
            state: directory

        - name: Copy dotfiles
          ansible.builtin.copy:
            src: "{{ playbook_dir }}/dotfiles/"
            dest: "{{ lookup('ansible.builtin.env', 'HOME') }}/.dotfiles/"

        - name: Run stow
          ansible.builtin.command: "stow --dir={{ ansible_env.HOME }}/.dotfiles --target {{ ansible_env.HOME }} autostart helix mpv shell pandoc kitty lazygit --verbose=2"
          register: result
          changed_when: 'result.stderr is search("LINK: ")'

    - name: Update .bashrc
      ansible.builtin.blockinfile:
        block: "{{ lookup('ansible.builtin.file', './bashrc.bash') }}"
        path: "{{ lookup('env', 'HOME') }}/.bashrc"
        backup: true
