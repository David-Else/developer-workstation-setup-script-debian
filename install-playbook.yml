- name: Install packages and set up Debian 13
  hosts: localhost
  vars_files:
    - packages.yml
  vars:
    bin_install_dir: /usr/local/bin
    marksman_version: "2024-12-18"
    marksman_shasum: "b9cb666c643dfd9b699811fdfc445ed4c56be65c1d878c21d46847f0d7b0e475"
    ltex_ls_plus_version: "18.4.0"
    lazygit_version: "0.45.0"
    yabridge_version: "5.0.5"

  tasks:
    - name: Remove unwanted desktop apps
      become: true
      ansible.builtin.apt:
        name: "{{ packages_to_remove }}"
        state: absent
        autoremove: true
        purge: true

    - name: Install packages from repositories
      become: true
      block:
        - name: Add Flathub repository
          block:
            - name: Add the Flathub repository
              community.general.flatpak_remote:
                name: flathub
                flatpakrepo_url: https://flathub.org/repo/flathub.flatpakrepo

        - name: Update and upgrade all Debian packages
          ansible.builtin.apt:
            upgrade: dist
            update_cache: true

        - name: Install Debian packages
          ansible.builtin.apt:
            name: "{{ packages_to_install }}"

        - name: Install Flatpak packages
          community.general.flatpak:
            name: "{{ flatpak_packages }}"

        - name: Install NPM global packages
          loop: "{{ npm_packages }}"
          community.general.npm:
            name: "{{ item }}"
            global: true

        - name: Install Python packages
          become: false
          ansible.builtin.command: pipx install {{ item }}
          loop: "{{ python_packages }}"
          args:
            creates: "{{ ansible_facts['user_dir'] }}/.local/pipx/venvs/{{ item }}"

    - name: Install packages directly from Github
      become: true
      block:
        # - name: Install custom nnn with nerd font 3 support from local dir
        #   ansible.builtin.apt:
        #     deb: "{{ playbook_dir }}/extras/nnn_4.9-1_amd64.deb"

        - name: Download and install rclone
          ansible.builtin.apt:
            deb: https://github.com/rclone/rclone/releases/download/v1.68.2/rclone-v1.68.2-linux-amd64.deb

        # Must be at least 134.3 to work with Helix https://packages.debian.org/trixie/hugo
        - name: Download and install hugo
          ansible.builtin.apt:
            deb: https://github.com/gohugoio/hugo/releases/download/v0.140.2/hugo_extended_0.140.2_linux-amd64.deb

    # - name: Download and install nnn plugins
    #   block:
    #     - name: Download the latest nnn plugins
    #       ansible.builtin.get_url:
    #         url: https://raw.githubusercontent.com/jarun/nnn/master/plugins/getplugs
    #         dest: /tmp/getplugs
    #         mode: "0755"

    #     - name: Install nnn plugins
    #       ansible.builtin.command: /tmp/getplugs
    #       args:
    #         creates: "{{ ansible_facts['user_dir'] }}/.config/nnn/plugins"

    - name: Download and install GitHub binaries
      become: true
      block:
        - name: Download and install marksman
          ansible.builtin.get_url:
            url: "https://github.com/artempyanykh/marksman/releases/download/{{ marksman_version }}/marksman-linux-x64"
            dest: "{{ bin_install_dir }}/marksman"
            mode: "0755"
            checksum: "sha256:{{ marksman_shasum }}"

        - name: Download and install ltex-ls-plus, depends on Java 21 or higher
          ansible.builtin.unarchive:
            src: "https://github.com/ltex-plus/ltex-ls-plus/releases/download/{{ ltex_ls_plus_version }}/ltex-ls-plus-{{ ltex_ls_plus_version }}.tar.gz"
            dest: "{{ bin_install_dir }}"
            remote_src: true
            extra_opts:
              - "--strip-components=1"
              - "ltex-ls-plus-{{ ltex_ls_plus_version }}/bin"
              - "ltex-ls-plus-{{ ltex_ls_plus_version }}/lib"
            creates: "{{ bin_install_dir }}/bin/ltex-ls-plus"

        - name: Create symlink to ltex-ls-plus binary
          ansible.builtin.file:
            src: "{{ bin_install_dir }}/bin/ltex-ls-plus"
            dest: "{{ bin_install_dir }}/ltex-ls-plus"
            state: link

        - name: Download and install lazygit
          ansible.builtin.unarchive:
            src: "https://github.com/jesseduffield/lazygit/releases/download/v{{ lazygit_version }}/lazygit_{{ lazygit_version }}_Linux_x86_64.tar.gz"
            dest: "{{ bin_install_dir }}"
            remote_src: true
            include: "lazygit"
            creates: "{{ bin_install_dir }}/lazygit"

        - name: Download and install yabridge
          ansible.builtin.unarchive:
            src: "https://github.com/robbert-vdh/yabridge/releases/download/{{ yabridge_version }}/yabridge-{{ yabridge_version }}.tar.gz"
            dest: "{{ ansible_facts['user_dir'] }}/.local/share"
            remote_src: true
            creates: "{{ ansible_facts['user_dir'] }}/.local/share/yabridge/yabridgectl"

    - name: Stow dotfiles
      block:
        - name: Create ~/.dotfile directory
          ansible.builtin.file:
            path: "{{ ansible_facts['user_dir'] }}/.dotfiles"
            state: directory
            mode: "0755"

        - name: Copy dotfiles to home directory
          ansible.builtin.copy:
            src: "{{ playbook_dir }}/dotfiles/"
            dest: "{{ ansible_facts['user_dir'] }}/.dotfiles/"

        # - name: Check for existing Kitty and Lazygit config files
        #   ansible.builtin.find:
        #     paths: "{{ ansible_facts['user_dir'] }}/.config/"
        #     patterns: "kitty, lazygit"
        #     file_type: directory
        #   register: config_dirs

        # - name: Remove existing config directories that conflict with Stow
        #   ansible.builtin.file:
        #     path: "{{ item.path }}"
        #     state: absent
        #   with_items: "{{ config_dirs.files }}"
        #   when: config_dirs.matched > 0

        - name: Run stow
          ansible.builtin.command:
            chdir: "{{ ansible_facts['user_dir'] }}/.dotfiles"
            cmd: >
              stow --target={{ ansible_facts['user_dir'] }} */ --verbose=2
          register: result
          changed_when: 'result.stderr is search("LINK: ")'
          failed_when: 'result.rc != 0 and "Conflicting" in result.stderr'

    - name: Create symlinks
      become: true
      block:
        - name: Gather the package facts
          ansible.builtin.package_facts:
            manager: auto

        - name: Create symlink for lldb-dap-19 as lldb-dap
          ansible.builtin.file:
            src: /usr/bin/lldb-dap-19
            dest: /usr/bin/lldb-dap
            state: link
          when: "'lldb-19' in ansible_facts.packages"

        - name: Create symlink for batcat as bat
          ansible.builtin.file:
            src: /usr/bin/batcat
            dest: /usr/local/bin/bat
            state: link
          when: "'bat' in ansible_facts.packages"

    - name: Setup Pipewire audio for realtime privileges and full range of playback sample rates
      block:
        - name: Create pipewire group
          become: true
          ansible.builtin.group:
            name: pipewire

        - name: Add user to the pipewire group to get realtime privileges from /etc/security/limits.d/25-pw-rlimits.conf
          become: true
          ansible.builtin.user:
            name: "{{ ansible_facts['user_id'] }}"
            groups: pipewire
            append: true

        - name: Ensure ~/.config/pipewire/ directory exists
          ansible.builtin.file:
            path: "{{ ansible_env['HOME'] }}/.config/pipewire/"
            state: directory

        - name: Copy pipewire.conf to user's config directory
          ansible.builtin.copy:
            src: "/usr/share/pipewire/pipewire.conf"
            dest: "{{ ansible_env['HOME'] }}/.config/pipewire/pipewire.conf"
            force: false

        - name: Update Pipewire allowed sample rates to include 44.1k 48k 88.2k 96k 176.4k and 192k to prevent unwanted resampling
          ansible.builtin.lineinfile:
            path: "{{ ansible_env['HOME'] }}/.config/pipewire/pipewire.conf"
            regexp: '^\s*#\s*default.clock.allowed-rates\s*='
            line: "default.clock.allowed-rates = [ 44100 48000 88200 96000 176400 192000 ]"
            backrefs: true
          register: samplerates_updated

    - name: Update .bashrc by appending extra config
      ansible.builtin.blockinfile:
        block: "{{ lookup('ansible.builtin.file', './bashrc.bash') }}"
        path: "{{ ansible_facts['user_dir'] }}/.bashrc"
        backup: true

    - name: Run pipx ensurepath
      ansible.builtin.command: pipx ensurepath
      changed_when: false

    # A single shell session is required for the installations to ensure the Rust environment
    # variables are correctly sourced and recognized by subsequent installations.
    # The `set -o pipefail` option ensures the task fails if any command in the pipeline fails
    # The use of "/bin/bash" as the executable is specified to guarantee compatibility with `pipefail`.
    # The default shell on some systems on Debian is `dash`, which does not support such options.
    # The `.cargo/env` file, created by the Rust installation script, acts as a marker indicating
    # Rust is installed. If this file exists, Ansible skips this task, ensuring idempotency and
    # avoiding unnecessary reinstallation.
    - name: Install the latest stable Rust, Rust-analyzer, and AIChat
      ansible.builtin.shell: >
        set -o pipefail &&
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y &&
        . "{{ ansible_facts['user_dir'] }}/.cargo/env" &&
        rustup component add rust-analyzer &&
        cargo install aichat &&
      args:
        creates: "{{ ansible_facts['user_dir'] }}/.cargo/env"
        executable: /bin/bash

    # Blender will be coming to Trixie, not here in Dec 24
