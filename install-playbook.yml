- name: Install Debian, Flatpak, NPM and Python packages, and setup Debian 12
  hosts: localhost
  vars_files:
    - packages.yml
  tasks:
    - name: Remove unwanted desktop apps
      become: true
      ansible.builtin.apt:
        name: "{{ packages_to_remove }}"
        state: absent
        autoremove: true
        purge: true

    - name: Add repositories
      become: true
      block:
        - name: Add the Flathub repository
          community.general.flatpak_remote:
            name: flathub
            flatpakrepo_url: https://flathub.org/repo/flathub.flatpakrepo

        - name: Download Mozilla's GPG key
          ansible.builtin.get_url:
            url: https://packages.mozilla.org/apt/repo-signing-key.gpg
            dest: /etc/apt/keyrings/packages.mozilla.org.asc
            mode: "0644"

        - name: Add Mozilla apt repository
          ansible.builtin.apt_repository:
            repo: deb [signed-by=/etc/apt/keyrings/packages.mozilla.org.asc] https://packages.mozilla.org/apt mozilla main
            filename: mozilla

        - name: Set pin preference for Mozilla packages
          ansible.builtin.copy:
            dest: /etc/apt/preferences.d/mozilla
            content: |
              Package: *
              Pin: origin packages.mozilla.org
              Pin-Priority: 1000
            mode: "0644"

    - name: Install Packages from repositories
      become: true
      block:
        - name: Update and upgrade all Debian packages
          ansible.builtin.apt:
            upgrade: dist
            update_cache: true

        - name: Install Debian packages
          ansible.builtin.apt:
            name: "{{ packages_to_install }}"

        - name: Install Flatpak packages
          community.general.flatpak:
            name: "{{ flatpak_packages }}"

        - name: Install NPM global packages
          loop: "{{ npm_packages }}"
          community.general.npm:
            name: "{{ item }}"
            global: true

        - name: Install Python packages
          become: false
          ansible.builtin.command: pipx install {{ item }}
          loop: "{{ python_packages }}"
          args:
            creates: "{{ ansible_facts['user_dir'] }}/.local/pipx/venvs/{{ item }}"

    - name: Install specific Debian packages from local drive and Github
      become: true
      block:
        - name: Install custom nnn with nerd font 3 support from local dir
          ansible.builtin.apt:
            deb: "{{ playbook_dir }}/extras/nnn_4.9-1_amd64.deb"

        - name: Download and install rclone
          ansible.builtin.apt:
            deb: https://github.com/rclone/rclone/releases/download/v1.68.2/rclone-v1.68.2-linux-amd64.deb

        # Must be at least 134.3 to work with Helix
        - name: Download and install hugo
          ansible.builtin.apt:
            deb: https://github.com/gohugoio/hugo/releases/download/v0.134.3/hugo_extended_0.134.3_linux-amd64.deb

    - name: Download and install nnn plugins
      block:
        - name: Download the latest nnn plugins
          ansible.builtin.get_url:
            url: https://raw.githubusercontent.com/jarun/nnn/master/plugins/getplugs
            dest: /tmp/getplugs
            mode: "0755"

        - name: Install nnn plugins
          ansible.builtin.command: /tmp/getplugs
          args:
            creates: "{{ ansible_facts['user_dir'] }}/.config/nnn/plugins"

    - name: Stow dotfiles
      block:
        - name: Create ~/.dotfile directory
          ansible.builtin.file:
            path: "{{ ansible_facts['user_dir'] }}/.dotfiles"
            state: directory
            mode: "0755"

        - name: Copy dotfiles
          ansible.builtin.copy:
            src: "{{ playbook_dir }}/dotfiles/"
            dest: "{{ ansible_facts['user_dir'] }}/.dotfiles/"

        # - name: Check for existing Kitty and Lazygit config files
        #   ansible.builtin.find:
        #     paths: "{{ ansible_facts['user_dir'] }}/.config/"
        #     patterns: "kitty, lazygit"
        #     file_type: directory
        #   register: config_dirs

        # - name: Remove existing config directories that conflict with Stow
        #   ansible.builtin.file:
        #     path: "{{ item.path }}"
        #     state: absent
        #   with_items: "{{ config_dirs.files }}"
        #   when: config_dirs.matched > 0

        - name: Run stow
          ansible.builtin.command:
            chdir: "{{ ansible_facts['user_dir'] }}/.dotfiles"
            cmd: >
              stow --target={{ ansible_facts['user_dir'] }} autostart helix mpv shell pandoc kitty lazygit keepassxc aichat sidplayfp marksman
              --verbose=2
          register: result
          changed_when: 'result.stderr is search("LINK: ")'
          failed_when: 'result.rc != 0 and "Conflicting" in result.stderr'

    - name: Update .bashrc by appending extra config
      ansible.builtin.blockinfile:
        block: "{{ lookup('ansible.builtin.file', './bashrc.bash') }}"
        path: "{{ ansible_facts['user_dir'] }}/.bashrc"
        backup: true

    - name: Run pipx ensurepath
      ansible.builtin.command: pipx ensurepath
      changed_when: false

    - name: Create symlinks based on installed packages
      become: true
      block:
        - name: Gather the package facts
          ansible.builtin.package_facts:
            manager: auto

        - name: Create symlink for lldb-dap-19 as lldb-dap
          ansible.builtin.file:
            src: /usr/bin/lldb-dap-19
            dest: /usr/bin/lldb-dap
            state: link
          when: "'lldb-15' in ansible_facts.packages"

        - name: Create symlink for batcat as bat
          ansible.builtin.file:
            src: /usr/bin/batcat
            dest: /usr/local/bin/bat
            state: link
          when: "'bat' in ansible_facts.packages"

    - name: Setup Pipewire audio for realtime privileges and full range of playback sample rates
      block:
        - name: Create pipewire group
          become: true
          ansible.builtin.group:
            name: pipewire

        - name: Add user to the pipewire group to get realtime privileges from /etc/security/limits.d/25-pw-rlimits.conf
          become: true
          ansible.builtin.user:
            name: "{{ ansible_facts['user_id'] }}"
            groups: pipewire
            append: true

        - name: Ensure ~/.config/pipewire/ directory exists
          ansible.builtin.file:
            path: "{{ ansible_env['HOME'] }}/.config/pipewire/"
            state: directory

        - name: Copy pipewire.conf to user's config directory
          ansible.builtin.copy:
            src: "/usr/share/pipewire/pipewire.conf"
            dest: "{{ ansible_env['HOME'] }}/.config/pipewire/pipewire.conf"
            force: false

        - name: Update Pipewire allowed sample rates to include 44.1k 48k 88.2k 96k 176.4k and 192k to prevent unwanted resampling
          ansible.builtin.lineinfile:
            path: "{{ ansible_env['HOME'] }}/.config/pipewire/pipewire.conf"
            regexp: '^\s*#\s*default.clock.allowed-rates\s*='
            line: "default.clock.allowed-rates = [ 44100 48000 88200 96000 176400 192000 ]"
            backrefs: true
          register: samplerates_updated
